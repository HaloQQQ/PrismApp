<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:contracts="clr-namespace:IceTea.Wpf.Core.Contracts;assembly=IceTea.Wpf.Core"
    xmlns:panelCtrls="clr-namespace:IceTea.Wpf.Core.CustomControls;assembly=IceTea.Wpf.Core">

    <!--  VirtualizingStackPanel  -->
    <Style x:Key="VirtualStackPanelImageSelector" TargetType="VirtualizingStackPanel">
        <Setter Property="Width" Value="300" />

        <Setter Property="HorizontalAlignment" Value="Left" />
    </Style>

    <!--  VirtualizingWrapPanel  -->
    <Style x:Key="VirtualWrapPanelImageSelector" TargetType="panelCtrls:VirtualizingWrapPanel">
        <Setter Property="ChildHeight" Value="100" />
        <Setter Property="ChildWidth" Value="100" />

        <Setter Property="ScrollOffset" Value="100" />

        <Setter Property="Width" Value="300" />

        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
    </Style>

    <!--  菜单  -->
    <ContextMenu x:Key="MainMenu">
        <MenuItem
            Header="只允许一个程序"
            IsCheckable="True"
            IsChecked="{Binding OnlyOneProcess}" />

        <MenuItem
            Header="开机自启"
            IsCheckable="True"
            IsChecked="{Binding AutoStart}" />

        <MenuItem
            Header="背景轮播"
            IsCheckable="True"
            IsChecked="{Binding BackgroundSwitch}" />

        <MenuItem
            Header="音乐播放器"
            IsCheckable="True"
            IsChecked="{Binding IsMusicPlayer}" />

        <MenuItem
            Header="视频播放器"
            IsCheckable="True"
            IsChecked="{Binding IsVideoPlayer}" />

        <MenuItem
            Command="{x:Static contracts:CustomCommands.OpenSettingCommand}"
            CommandTarget="{Binding PlacementTarget, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
            Header="设置"
            InputGestureText="{Binding WindowKeyBindingMap[设置弹窗].CombineKeys}" />
    </ContextMenu>

    <!--  消息板Menu  -->
    <ContextMenu x:Key="ForMessageBoard">
        <MenuItem
            Command="Refresh"
            CommandTarget="{Binding PlacementTarget, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
            Header="清空" />
        <MenuItem
            Header="记录日志"
            IsCheckable="True"
            IsChecked="{Binding IsLogging}" />
        <MenuItem
            Command="Open"
            CommandParameter="Log"
            CommandTarget="{Binding PlacementTarget, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
            Header="打开日志文件" />
    </ContextMenu>

    <!--  不自动补全前缀的、聚焦时Width变化的TextBox  -->
    <Style
        x:Key="WidthAnimationWithoutPrefixTextBox"
        BasedOn="{StaticResource TextBox_DisplayInfo}"
        TargetType="TextBox">
        <Style.Triggers>
            <EventTrigger RoutedEvent="TextBox.GotFocus">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation
                            Storyboard.TargetProperty="(TextBox.Width)"
                            From="200"
                            To="300"
                            Duration="0:0:1">
                            <!-- <DoubleAnimation.EasingFunction> -->
                            <!--     <BounceEase Bounces="3" Bounciness="1" EasingMode="EaseInOut" /> -->
                            <!-- </DoubleAnimation.EasingFunction> -->
                        </DoubleAnimation>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="TextBox.LostFocus">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation
                            By="-5"
                            Storyboard.TargetProperty="(TextBox.Width)"
                            To="200"
                            Duration="0:0:1">
                            <!-- <DoubleAnimation.EasingFunction> -->
                            <!--     <BackEase EasingMode="EaseInOut" Amplitude="5" /> -->
                            <!-- </DoubleAnimation.EasingFunction> -->
                        </DoubleAnimation>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <!--  通讯连接按钮  -->
    <Style
        x:Key="ConnButton"
        BasedOn="{StaticResource {x:Type Button}}"
        TargetType="Button">

        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock>
                        <TextBlock Text="&#xe650;" />
                        <TextBlock
                            x:Name="ButtonContent"
                            Text="打开连接"
                            ToolTip="打开连接" />
                    </TextBlock>

                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding DataContext.IsConnected, RelativeSource={RelativeSource AncestorType=Button}}" Value="True">
                            <Setter TargetName="ButtonContent" Property="Text" Value="关闭连接" />
                            <Setter TargetName="ButtonContent" Property="ToolTip" Value="关闭连接" />
                        </DataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding DataContext.CanReConnect, RelativeSource={RelativeSource AncestorType=Button}}" Value="True" />
                                <Condition Binding="{Binding DataContext.Connecting, RelativeSource={RelativeSource AncestorType=Button}}" Value="True" />
                                <Condition Binding="{Binding DataContext.IsConnected, RelativeSource={RelativeSource AncestorType=Button}}" Value="False" />
                            </MultiDataTrigger.Conditions>

                            <Setter TargetName="ButtonContent" Property="Text" Value="重连中.." />
                            <Setter TargetName="ButtonContent" Property="ToolTip" Value="重连中.." />
                        </MultiDataTrigger>

                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <DataTrigger Binding="{Binding Connecting}" Value="True">
                <Setter Property="IsEnabled" Value="False" />
            </DataTrigger>
            <!--<DataTrigger Binding="{Binding IsConnected}" Value="True">
                <Setter Property="Background" Value="Gray" />
            </DataTrigger>-->
        </Style.Triggers>
    </Style>

    <!--  ListBoxItem样式  -->
    <Style x:Key="HorizontalListBoxItemStyle" TargetType="ListBoxItem">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="5,3,0,3" />
        <Setter Property="Background" Value="{StaticResource TransparentButtonBackground}" />
        <Setter Property="MaxWidth" Value="130.5" />
        <Setter Property="Height" Value="30" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />

        <Setter Property="Foreground" Value="{DynamicResource TextBlock.Foreground}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border
                        x:Name="border"
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}"
                        Margin="{TemplateBinding Margin}"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="8"
                        ToolTip="{TemplateBinding Content}">
                        <DockPanel>
                            <Button
                                x:Name="CloseButton"
                                Command="{x:Static ApplicationCommands.Close}"
                                Content="&#xe612;"
                                DockPanel.Dock="Right"
                                Style="{StaticResource IconButtonBase_Small_Expand}"
                                Visibility="Hidden" />

                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <!--<Setter Property="Foreground" Value="{StaticResource ShallowBlue}" />-->
                            <Setter Property="Background" Value="{StaticResource HoveredTransparentButtonBackground}" />
                            <Setter Property="Cursor" Value="Hand" />
                            <Setter Property="RenderTransform">
                                <Setter.Value>
                                    <ScaleTransform CenterX="0" ScaleX="1.01" ScaleY="1.01" />
                                </Setter.Value>
                            </Setter>

                            <Setter TargetName="CloseButton" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <GeometryGroup x:Key="PopupGeometryGroup_Bright">
        <PathGeometry Figures="M115,10 L125,5 L135,10 Z" />
        <RectangleGeometry RadiusX="10" RadiusY="10">
            <RectangleGeometry.Rect>
                <Rect Width="250" Height="55" />
            </RectangleGeometry.Rect>
            <RectangleGeometry.Transform>
                <TranslateTransform Y="10" />
            </RectangleGeometry.Transform>
        </RectangleGeometry>
    </GeometryGroup>
</ResourceDictionary>