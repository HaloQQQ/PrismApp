<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:contracts="clr-namespace:IceTea.Wpf.Core.Contracts;assembly=IceTea.Wpf.Core"
    xmlns:panelCtrls="clr-namespace:IceTea.Wpf.Core.CustomControls;assembly=IceTea.Wpf.Core">

    <!--  VirtualizingStackPanel  -->
    <Style x:Key="VirtualStackPanelImageSelector" TargetType="VirtualizingStackPanel">
        <Setter Property="Width" Value="300" />

        <Setter Property="HorizontalAlignment" Value="Left" />
    </Style>

    <!--  VirtualizingWrapPanel  -->
    <Style x:Key="VirtualWrapPanelImageSelector" TargetType="panelCtrls:VirtualizingWrapPanel">
        <Setter Property="ChildHeight" Value="100" />
        <Setter Property="ChildWidth" Value="100" />

        <Setter Property="ScrollOffset" Value="100" />

        <Setter Property="Width" Value="300" />

        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
    </Style>

    <!--  菜单  -->
    <ContextMenu
        x:Key="MainMenu"
        HorizontalOffset="-100"
        VerticalOffset="20">
        <MenuItem
            Header="只允许一个程序"
            IsCheckable="True"
            IsChecked="{Binding OnlyOneProcess}" />

        <MenuItem
            Header="开机自启"
            IsCheckable="True"
            IsChecked="{Binding AutoStart}" />

        <MenuItem
            Header="背景轮播"
            IsCheckable="True"
            IsChecked="{Binding BackgroundSwitch}" />

        <MenuItem
            Header="音乐播放器"
            IsCheckable="True"
            IsChecked="{Binding IsMusicPlayer}" />

        <MenuItem
            Header="视频播放器"
            IsCheckable="True"
            IsChecked="{Binding IsVideoPlayer}" />

        <MenuItem
            Command="{x:Static contracts:CustomCommands.OpenSettingCommand}"
            CommandTarget="{Binding PlacementTarget, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
            Header="设置"
            InputGestureText="{Binding WindowKeyBindingMap[设置弹窗].CombineKeys}" />
    </ContextMenu>

    <!--  消息板Menu  -->
    <ContextMenu x:Key="ForMessageBoard">
        <MenuItem
            Command="Refresh"
            CommandTarget="{Binding PlacementTarget, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
            Header="清空" />
        <MenuItem
            Header="记录日志"
            IsCheckable="True"
            IsChecked="{Binding IsLogging}" />
        <MenuItem
            Command="{Binding OpenLogCommand}"
            CommandTarget="{Binding PlacementTarget, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
            Header="打开日志文件" />
    </ContextMenu>

    <!--  不自动补全前缀的、聚焦时Width变化的TextBox  -->
    <Style
        x:Key="WidthAnimationWithoutPrefixTextBox"
        BasedOn="{StaticResource TextBox_DisplayInfo}"
        TargetType="TextBox">
        <Style.Triggers>
            <EventTrigger RoutedEvent="TextBox.GotFocus">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation
                            Storyboard.TargetProperty="(TextBox.Width)"
                            From="200"
                            To="300"
                            Duration="0:0:1">
                            <!-- <DoubleAnimation.EasingFunction> -->
                            <!--     <BounceEase Bounces="3" Bounciness="1" EasingMode="EaseInOut" /> -->
                            <!-- </DoubleAnimation.EasingFunction> -->
                        </DoubleAnimation>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="TextBox.LostFocus">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation
                            By="-5"
                            Storyboard.TargetProperty="(TextBox.Width)"
                            To="200"
                            Duration="0:0:1">
                            <!-- <DoubleAnimation.EasingFunction> -->
                            <!--     <BackEase EasingMode="EaseInOut" Amplitude="5" /> -->
                            <!-- </DoubleAnimation.EasingFunction> -->
                        </DoubleAnimation>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <GeometryGroup x:Key="PopupGeometryGroup_Bright">
        <PathGeometry Figures="M115,10 L125,5 L135,10 Z" />
        <RectangleGeometry RadiusX="10" RadiusY="10">
            <RectangleGeometry.Rect>
                <Rect Width="250" Height="55" />
            </RectangleGeometry.Rect>
            <RectangleGeometry.Transform>
                <TranslateTransform Y="10" />
            </RectangleGeometry.Transform>
        </RectangleGeometry>
    </GeometryGroup>
</ResourceDictionary>