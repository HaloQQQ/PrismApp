<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:panelCtrls="clr-namespace:IceTea.Wpf.Core.CustomControls;assembly=IceTea.Wpf.Core"
                    xmlns:contracts="clr-namespace:IceTea.Wpf.Core.Contracts;assembly=IceTea.Wpf.Core">

    <!-- VirtualizingStackPanel -->
    <Style TargetType="VirtualizingStackPanel" x:Key="VirtualStackPanelImageSelector">
        <Setter Property="Width" Value="300" />

        <Setter Property="HorizontalAlignment" Value="Left" />
    </Style>

    <!-- VirtualizingWrapPanel -->
    <Style TargetType="panelCtrls:VirtualizingWrapPanel" x:Key="VirtualWrapPanelImageSelector">
        <Setter Property="ChildHeight" Value="100" />
        <Setter Property="ChildWidth" Value="100" />

        <Setter Property="ScrollOffset" Value="100" />

        <Setter Property="Width" Value="300" />

        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
    </Style>

    <!-- 菜单 -->
    <ContextMenu x:Key="MainMenu">
        <MenuItem IsCheckable="True" IsChecked="{Binding OnlyOneProcess}"
                  Header="只允许一个程序" />

        <MenuItem IsCheckable="True" IsChecked="{Binding AutoStart}"
                  Header="开机自启" />

        <MenuItem IsCheckable="True" IsChecked="{Binding BackgroundSwitch}"
                  Header="背景轮播" />

        <MenuItem IsCheckable="True" IsChecked="{Binding IsMusicPlayer}"
                  Header="音乐播放器" />

        <MenuItem IsCheckable="True" IsChecked="{Binding IsVideoPlayer}"
                  Header="视频播放器" />

        <MenuItem Command="{x:Static contracts:CustomCommands.OpenSettingCommand}"
                  CommandTarget="{Binding PlacementTarget,RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                  InputGestureText="{Binding WindowKeyBindingMap[设置弹窗].CombineKeys}"
                  Header="设置" />
    </ContextMenu>

    <!-- 消息板Menu -->
    <ContextMenu x:Key="ForMessageBoard">
        <MenuItem Header="清空" Command="Refresh" CommandTarget="{Binding PlacementTarget,RelativeSource={RelativeSource AncestorType=ContextMenu}}" />
        <MenuItem Header="记录日志" IsCheckable="True" IsChecked="{Binding IsLogging}" />
        <MenuItem Header="打开日志文件" Command="Open" CommandParameter="Log" CommandTarget="{Binding PlacementTarget,RelativeSource={RelativeSource AncestorType=ContextMenu}}" />
    </ContextMenu>

    <!-- 不自动补全前缀的、聚焦时Width变化的TextBox -->
    <Style TargetType="TextBox" x:Key="WidthAnimationWithoutPrefixTextBox" BasedOn="{StaticResource TextBox_DisplayInfo}">
        <Style.Triggers>
            <EventTrigger RoutedEvent="TextBox.GotFocus">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation Duration="0:0:1" From="200" To="300"
                                         Storyboard.TargetProperty="(TextBox.Width)">
                            <!-- <DoubleAnimation.EasingFunction> -->
                            <!--     <BounceEase Bounces="3" Bounciness="1" EasingMode="EaseInOut" /> -->
                            <!-- </DoubleAnimation.EasingFunction> -->
                        </DoubleAnimation>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="TextBox.LostFocus">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation Duration="0:0:1" By="-5" To="200"
                                         Storyboard.TargetProperty="(TextBox.Width)">
                            <!-- <DoubleAnimation.EasingFunction> -->
                            <!--     <BackEase EasingMode="EaseInOut" Amplitude="5" /> -->
                            <!-- </DoubleAnimation.EasingFunction> -->
                        </DoubleAnimation>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <!-- 通讯连接按钮 -->
    <Style TargetType="Button" x:Key="ConnButton" BasedOn="{StaticResource {x:Type Button}}">

        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock>
                        <TextBlock Text="&#xe650;" />
                        <TextBlock x:Name="ButtonContent" 
                                   Text="打开连接"
                                   ToolTip="打开连接"/>
                    </TextBlock>

                    <DataTemplate.Triggers>
                        <DataTrigger Value="True" Binding="{Binding DataContext.IsConnected,RelativeSource={RelativeSource AncestorType=Button}}">
                            <Setter TargetName="ButtonContent" Property="Text" Value="关闭连接"/>
                            <Setter TargetName="ButtonContent" Property="ToolTip" Value="关闭连接"/>
                        </DataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Value="True" Binding="{Binding DataContext.CanReConnect,RelativeSource={RelativeSource AncestorType=Button}}"  />
                                <Condition Value="True" Binding="{Binding DataContext.Connecting,RelativeSource={RelativeSource AncestorType=Button}}" />
                                <Condition Value="False" Binding="{Binding DataContext.IsConnected,RelativeSource={RelativeSource AncestorType=Button}}" />
                            </MultiDataTrigger.Conditions>

                            <Setter TargetName="ButtonContent" Property="Text" Value="重连中.." />
                            <Setter TargetName="ButtonContent" Property="ToolTip" Value="重连中.." />
                        </MultiDataTrigger>

                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <DataTrigger Binding="{Binding Connecting}" Value="True">
                <Setter Property="IsEnabled" Value="False" />
            </DataTrigger>
            <!--<DataTrigger Binding="{Binding IsConnected}" Value="True">
                <Setter Property="Background" Value="Gray" />
            </DataTrigger>-->
        </Style.Triggers>
    </Style>

    <!-- ListBoxItem样式 -->
    <Style TargetType="ListBoxItem" x:Key="HorizontalListBoxItemStyle">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="5,3,0,3" />
        <Setter Property="Background" Value="{StaticResource TransparentButtonBackground}" />
        <Setter Property="MaxWidth" Value="130.5" />
        <Setter Property="Height" Value="30" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />

        <Setter Property="Foreground" Value="{DynamicResource TextBlock.Foreground}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border x:Name="border" CornerRadius="8" Height="{TemplateBinding Height}"
                            Width="{TemplateBinding Width}"
                            Margin="{TemplateBinding Margin}" Padding="{TemplateBinding Padding}"
                            ToolTip="{TemplateBinding Content}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}">
                        <DockPanel>
                            <Button x:Name="CloseButton" Visibility="Hidden" DockPanel.Dock="Right" Command="{x:Static ApplicationCommands.Close}" Style="{StaticResource IconButtonBase_Small_Expand}" Content="&#xe612;"/>

                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{StaticResource ShallowBlue}" />
                            <Setter Property="Background" Value="{StaticResource HoveredTransparentButtonBackground}" />
                            <Setter Property="Cursor" Value="Hand" />
                            <Setter Property="RenderTransform">
                                <Setter.Value>
                                    <ScaleTransform CenterX="0" ScaleX="1.01" ScaleY="1.01" />
                                </Setter.Value>
                            </Setter>

                            <Setter TargetName="CloseButton" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <GeometryGroup x:Key="PopupGeometryGroup_Bright">
        <PathGeometry Figures="M115,10 L125,5 L135,10 Z" />
        <RectangleGeometry RadiusX="10" RadiusY="10">
            <RectangleGeometry.Rect>
                <Rect Width="250" Height="55"/>
            </RectangleGeometry.Rect>
            <RectangleGeometry.Transform>
                <TranslateTransform Y="10"/>
            </RectangleGeometry.Transform>
        </RectangleGeometry>
    </GeometryGroup>
</ResourceDictionary>