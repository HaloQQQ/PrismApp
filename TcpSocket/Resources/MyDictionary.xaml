<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:panelCtrls="clr-namespace:TcpSocket.UsefulControl"
                    xmlns:helper="clr-namespace:TcpSocket.Helper">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="GenericDictionary.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!-- VirtualizingStackPanel -->
    <Style TargetType="VirtualizingStackPanel" x:Key="VirtualStackPanelImageSelector">
        <Setter Property="Width" Value="300" />

        <Setter Property="HorizontalAlignment" Value="Left" />
    </Style>

    <!-- VirtualizingWrapPanel -->
    <Style TargetType="panelCtrls:VirtualizingWrapPanel" x:Key="VirtualWrapPanelImageSelector">
        <Setter Property="ChildHeight" Value="100" />
        <Setter Property="ChildWidth" Value="100" />

        <Setter Property="ScrollOffset" Value="50" />

        <Setter Property="Width" Value="300" />

        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
    </Style>

    <!-- RichTextBox -->
    <Style TargetType="TextBox" x:Key="RichTextStyle" BasedOn="{StaticResource WithoutPrefixTextBox}">
        <!-- <Setter Property="BorderBrush" Value="LightGray" /> -->
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="VerticalScrollBarVisibility" Value="Auto" />

        <Setter Property="FontSize" Value="13" />
        <Setter Property="Padding" Value="5" />

        <Setter Property="helper:MyAttachProperty.CornerRadius" Value="5" />

        <Setter Property="BorderBrush" Value="LightGray" />
        <Setter Property="BorderThickness" Value="1" />

        <Style.Triggers>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="Gray" />
            </Trigger>
        </Style.Triggers>

    </Style>

    <!-- SlideIconText -->
    <Style TargetType="TextBlock" x:Key="SlideIconText" BasedOn="{StaticResource IconText}">
        <Setter Property="Padding" Value="5" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="FontSize" Value="25" />

        <Setter Property="Text" Value="&#xe65e;" />
        <Setter Property="ToolTip" Value="呈现" />

        <Setter Property="RenderTransform">
            <Setter.Value>
                <TranslateTransform Y="0" />
            </Setter.Value>
        </Setter>

        <Style.Triggers>

            <DataTrigger
                Binding="{Binding Margin.Top,
                    RelativeSource={
                        RelativeSource 
                        FindAncestor, 
                        AncestorLevel=1, 
                        AncestorType=UserControl
                    }
                }"
                Value="0">
                <Setter Property="Text" Value="&#xe65d;" />
                <Setter Property="ToolTip" Value="隐藏" />
            </DataTrigger>
            <Trigger Property="ToolTip" Value="呈现">
                <Setter Property="Opacity" Value="0" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value="1" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- 控件组悬停变色 -->
    <Style TargetType="StackPanel" x:Key="IconStackPanel">
        <Setter Property="Margin" Value="5,2" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource IconStackPanel.MouseOver.Background}" />
                <Setter Property="TextBlock.Foreground" Value="{DynamicResource IconStackPanel.MouseOver.Foreground}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- 背景面板 -->
    <Style TargetType="Grid" x:Key="Container">
        <!-- <Setter Property="Margin" Value="5" /> -->
        <Setter Property="ClipToBounds" Value="True" />

        <Setter Property="Background" Value="{DynamicResource Container.Background}" />

        <Setter Property="TextBlock.Foreground" Value="{DynamicResource TextBlock.Foreground}" />
    </Style>

    <!-- 不自动补全前缀的、聚焦时Width变化的TextBox -->
    <Style TargetType="TextBox" x:Key="WidthAnimationWithoutPrefixTextBox"
           BasedOn="{StaticResource WithoutPrefixTextBox}">
        <Style.Triggers>
            <EventTrigger RoutedEvent="TextBox.GotFocus">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation Duration="0:0:1" From="200" To="300"
                                         Storyboard.TargetProperty="(TextBox.Width)">
                            <!-- <DoubleAnimation.EasingFunction> -->
                            <!--     <BounceEase Bounces="3" Bounciness="1" EasingMode="EaseInOut" /> -->
                            <!-- </DoubleAnimation.EasingFunction> -->
                        </DoubleAnimation>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="TextBox.LostFocus">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation Duration="0:0:1" By="-5" To="200"
                                         Storyboard.TargetProperty="(TextBox.Width)">
                            <!-- <DoubleAnimation.EasingFunction> -->
                            <!--     <BackEase EasingMode="EaseInOut" Amplitude="5" /> -->
                            <!-- </DoubleAnimation.EasingFunction> -->
                        </DoubleAnimation>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <!-- 通讯软件的标题 -->
    <Style TargetType="TextBlock" x:Key="CommunicationTitleText" BasedOn="{StaticResource TitleText}">
        <Style.Triggers>

            <DataTrigger Binding="{Binding IsTcp}" Value="False">
                <Setter Property="Text" Value="UDP" />
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsTcp}" Value="True" />
                    <Condition Binding="{Binding IsTcpServer}" Value="False" />
                </MultiDataTrigger.Conditions>

                <MultiDataTrigger.Setters>
                    <Setter Property="Text" Value="Tcp客户端" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsTcp}" Value="True" />
                    <Condition Binding="{Binding IsTcpServer}" Value="True" />
                </MultiDataTrigger.Conditions>

                <MultiDataTrigger.Setters>
                    <Setter Property="Text" Value="Tcp服务端" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <!-- 通讯连接按钮 -->
    <Style TargetType="Button" x:Key="ConnButton" BasedOn="{StaticResource {x:Type Button}}">
        <Style.Triggers>
            <!-- <DataTrigger Binding="{Binding IsConnected}" Value="False"> -->
            <!--     <Setter Property="Background" Value="#0292f9" /> -->
            <!-- </DataTrigger> -->

            <DataTrigger Binding="{Binding IsConnected}" Value="True">
                <Setter Property="Background" Value="Gray" />
                <Setter Property="Cursor" Value="SizeAll" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- 通讯连接按钮的内容 -->
    <Style TargetType="TextBlock" x:Key="ConnText">
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsConnected}" Value="False">
                <Setter Property="Text" Value="打开连接" />
                <Setter Property="ToolTip" Value="打开连接" />
            </DataTrigger>

            <DataTrigger Binding="{Binding IsConnected}" Value="True">
                <Setter Property="ToolTip" Value="关闭连接" />
                <Setter Property="Text" Value="关闭连接" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    <Style TargetType="TextBlock" BasedOn="{StaticResource ConnText}" x:Key="TcpConnText">
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding CanReConnect}" Value="True" />
                    <Condition Binding="{Binding Connecting}" Value="True" />
                    <Condition Binding="{Binding IsConnected}" Value="False" />
                </MultiDataTrigger.Conditions>

                <Setter Property="Text" Value="重连中.." />
                <Setter Property="ToolTip" Value="重连中.." />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <!-- ListBoxItem样式 -->
    <Style TargetType="ListBoxItem" x:Key="HorizontalListBoxItemStyle">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="Padding" Value="5,3" />
        <Setter Property="Background" Value="LightCyan" />
        <Setter Property="Width" Value="100" />
        <Setter Property="Height" Value="30" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border x:Name="border" CornerRadius="8" Height="{TemplateBinding Height}"
                            Width="{TemplateBinding Width}"
                            Margin="{TemplateBinding Margin}" Padding="{TemplateBinding Padding}"
                            ToolTip="{TemplateBinding Content}"
                            Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="border" Property="Background">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                        <GradientStop Color="#FF6B6B6B" Offset="0.5"/>
                                        <GradientStop Color="#FF535353" Offset="0.5"/>
                                        <GradientStop Color="#FF535353" Offset="0.022"/>
                                        <GradientStop Color="#FF555555" Offset="0.991"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="Blue" />
                            <Setter Property="Background" Value="#ddd" />
                            <Setter Property="Cursor" Value="Hand" />
                            <Setter Property="RenderTransform">
                                <Setter.Value>
                                    <ScaleTransform CenterX="0" ScaleX="1.01" ScaleY="1.01" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>