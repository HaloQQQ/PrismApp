<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Helper</name>
    </assembly>
    <members>
        <member name="T:Helper.AbstractModel.AbstractRecyclable">
            <summary>
            可回收对象的基类
            </summary>
        </member>
        <member name="M:Helper.AbstractModel.AbstractRecyclable.Dispose">
            <summary>
            回收到对象池，假如有的话
            </summary>
        </member>
        <member name="T:Helper.AbstractModel.BaseModel">
            <summary>
            常用基础Model功能
            </summary>
        </member>
        <member name="M:Helper.AbstractModel.BaseModel.Clone">
            <summary>
            浅克隆
            </summary>
            <returns></returns>
        </member>
        <member name="M:Helper.AbstractModel.BaseModel.GetTableName">
            <summary>
            获取该Model对应的数据表名
            TableAttribute
            </summary>
            <returns></returns>
        </member>
        <member name="T:Helper.AbstractModel.BaseNotifyModel">
            <summary>
            WPF中可触发PropertyChanged事件的Model
            </summary>
        </member>
        <member name="T:Helper.AbstractModel.BaseProxy`1">
            <summary>
            动态代理
            T: 1.实现MarshalByRefObject类的被代理类型
               2.接口：比如IProxy
            生成的代理对象将继承或实现自T
            </summary>
        </member>
        <member name="M:Helper.AbstractModel.BaseProxy`1.#ctor(System.MarshalByRefObject,System.Object)">
            <summary>
            这种方式可以代理被代理类的所有方法
            </summary>
            <param name="obj"></param>
            <param name="aspectParam"></param>
        </member>
        <member name="M:Helper.AbstractModel.BaseProxy`1.#ctor(`0,System.Object)">
            <summary>
            这种方式只能代理T接口所提供的方法
            </summary>
            <param name="obj"></param>
            <param name="aspectParam"></param>
        </member>
        <member name="M:Helper.AbstractModel.BaseProxy`1.GetProxyInstance">
            <summary>
            返回type的代理实现类
            </summary>
            <returns></returns>
        </member>
        <member name="M:Helper.AbstractModel.BaseProxy`1.Executing">
            <summary>
            代理前
            </summary>
        </member>
        <member name="M:Helper.AbstractModel.BaseProxy`1.Executed">
            <summary>
            代理后
            </summary>
        </member>
        <member name="T:Helper.Statics.NotShowInViewAttribute">
            <summary>
            标记此特性的属性在使用ViewExtendMethod.AddWithoutTemplateByNotShowInView时不会显示在datagrid中
            </summary>
        </member>
        <member name="T:Helper.Statics.NotShowInDataGridAttribute">
            <summary>
            标记此特性的属性在使用ViewExtendMethod.AddWithoutTemplateByNotShowInView时不会显示在datagrid中
            </summary>
        </member>
        <member name="T:Helper.Statics.CanEditAttribute">
            <summary>
            标记此特性的属性ViewExtendMethod.AddWithoutTemplateByNotShowInView时可以被编辑
            </summary>
        </member>
        <member name="M:Helper.Extensions.ModelExtensions.GetTableName(System.Type)">
            <summary>
            获取数据表名 TableAttribute
            </summary>
        </member>
        <member name="M:Helper.Extensions.ModelExtensions.GetColumnName(System.Reflection.PropertyInfo)">
            <summary>
            获取在该属性上标记的字符串， 用来修改列标题 ColumnAttribute
            </summary>
        </member>
        <member name="M:Helper.Extensions.ModelExtensions.GetEnumDescriptions(System.Type)">
            <summary>
            获取枚举类型中元素的描述集合
            </summary>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="M:Helper.Extensions.ModelExtensions.GetEnumDescription(System.Enum)">
            <summary>
            获取枚举元素描述
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Helper.Extensions.ModelExtensions.GetEditable(System.Reflection.PropertyInfo)">
            <summary>
            设置DataGrid列是否可编辑
            CanEditAttribute
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Helper.Extensions.ModelExtensions.GetRealColumn(System.Reflection.PropertyInfo,System.Data.DataTable)">
            <summary>
            优先使用DataTable的列名
            用该特性填入数据库列名
            其次使用ColumnAttribute
            使用ColumnAttribute特性时 如果填入字符就是用，不填就获取Pascal命名
            </summary>
        </member>
        <member name="M:Helper.Extensions.StringExtensions.ToPascal(System.String)">
            <summary>
            Split by '_' '-'
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Helper.Extensions.StringExtensions.TrimWhiteSpace(System.String)">
            <summary>
            去除 0 换行 前后空格
            </summary>
            <param name="originalString"></param>
            <returns></returns>
        </member>
        <member name="M:Helper.Extensions.StringExtensions.PackInChar(System.String,System.String)">
            <summary>
            str 添加 chars前后缀
            </summary>
            <param name="str"></param>
            <param name="chars"></param>
            <returns></returns>
        </member>
        <member name="M:Helper.Extensions.StringExtensions.ConvertEncoding(System.String,System.Text.Encoding,System.Text.Encoding)">
            <summary>
            编码转换
            </summary>
            <param name="str"></param>
            <param name="encodingFrom"></param>
            <param name="encodingTo"></param>
            <returns></returns>
        </member>
        <member name="M:Helper.Extensions.StringExtensions.GetHexFromString(System.String)">
            <summary>
            String=>HEX
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Helper.Extensions.StringExtensions.GetStringFromHex(System.String)">
            <summary>
            HEX=>String
            </summary>
            <param name="hexStr"></param>
            <returns></returns>
        </member>
        <member name="M:Helper.Extensions.StringExtensions.GetBytesFromHex(System.String)">
            <summary>
            去除hexStr中可能存在的空格,然后转换 HEX=>Byte[]
            </summary>
            <param name="hexStr"></param>
            <returns></returns>
        </member>
        <member name="M:Helper.Extensions.ViewExtensions.GetDataGridWithHeader``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            创建包含主题的DataGrid
            </summary>
            <param name="datas">列表数据</param>
            <param name="headerName">主题名或实体描述Description</param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Helper.Extensions.ViewExtensions.GetVisualAncestor``1(System.Windows.DependencyObject)">
            <summary>
            获取最近的指定类型Visual父元素
            </summary>
            <param name="reference"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Helper.Extensions.ViewExtensions.GetLogicalAncestor``1(System.Windows.DependencyObject,System.String)">
            <summary>
            获取最近的指定类型Logical父元素
            </summary>
            <param name="reference"></param>
            <param name="name"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Helper.Extensions.ViewExtensions.GetVisualChildObjects``1(System.Windows.DependencyObject)">
            <summary> 
            获得指定元素的所有Visual子元素 
            </summary> 
            <typeparam name="T"></typeparam> 
            <param name="obj"></param> 
            <returns></returns> 
        </member>
        <member name="M:Helper.Extensions.ViewExtensions.GetLogicalChildObjects``1(System.Windows.DependencyObject)">
            <summary> 
            获得指定元素的所有Visual子元素 
            </summary> 
            <typeparam name="T"></typeparam> 
            <param name="obj"></param> 
            <returns></returns> 
        </member>
        <member name="M:Helper.Extensions.ViewExtensions.GetVisualChildObject``1(System.Windows.DependencyObject,System.String)">
            <summary>
            查找Visual子元素 
            </summary> 
            <typeparam name="T"></typeparam> 
            <param name="obj"></param> 
            <param name="name">寻找该name的T控件或第一个T类型的无名控件</param> 
            <returns></returns> 
        </member>
        <member name="M:Helper.Extensions.ViewExtensions.GetLogicalChildObject``1(System.Windows.DependencyObject,System.String)">
            <summary>
            查找Logical子元素 
            </summary>
            <param name="obj"></param>
            <param name="name"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Helper.FileOperation.GeneralFileTool">
            <summary>
            包含一切常用目录及信息
            日志记录csv、txt
            </summary>
        </member>
        <member name="M:Helper.FileOperation.GeneralFileTool.IsDirectory(System.String)">
            <summary>
            允许目录不存在
            </summary>
            <param name="path"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">path为空时，路径的形式不合法</exception>
        </member>
        <member name="M:Helper.FileOperation.GeneralFileTool.CheckFile(System.String,System.Predicate{System.String})">
            <summary>
            默认检查文件是否存在
            </summary>
            <param name="file"></param>
            <param name="predicate"></param>
        </member>
        <member name="M:Helper.FileOperation.GeneralFileTool.CheckFilePath(System.String,System.Predicate{System.String})">
            <summary>
            path!=null
            </summary>
            <param name="path"></param>
            <param name="predicate"></param>
        </member>
        <member name="M:Helper.FileOperation.GeneralFileTool.CheckDirectory(System.String,System.Predicate{System.String})">
            <summary>
            directory!=null and directory.IsDirectory
            </summary>
            <param name="directory"></param>
            <param name="predicate"></param>
        </member>
        <member name="M:Helper.FileOperation.GeneralFileTool.CleanDirectory(System.String)">
            <summary>
            清空文件夹
            </summary>
            <param name="dir"></param>
            <returns>if dir exists,return true;else,return false;</returns>
        </member>
        <member name="M:Helper.FileOperation.GeneralFileTool.DeleteDirectory(System.String)">
            <summary>
            递归删除文件夹
            </summary>
            <returns>if dir exists,return true;else return false</returns>
        </member>
        <member name="M:Helper.FileOperation.GeneralFileTool.CreateDirectory(System.String)">
            <summary>
            递归创建目标目录
            </summary>
            <param name="directory">目录路径</param>
            <exception cref="T:System.InvalidOperationException">if is not directory, throws InvalidOperationException</exception>
        </member>
        <member name="M:Helper.FileOperation.GeneralFileTool.CreateTodayDir(System.String)">
            <summary>
            在该目录下创建日期分类目录
            </summary>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="M:Helper.FileOperation.GeneralFileTool.CopyDirContentTo(System.String,System.String)">
            <summary>
            递归复制文件夹内容到指定目录
            </summary>
            <param name="srcDir">当前存在的目录</param>
            <param name="destDir">允许当前不存在的目录</param>
            <returns>目录不存在或目录下没有内容，返回false</returns>
        </member>
        <member name="M:Helper.FileOperation.GeneralFileTool.GetParentPath(System.String)">
            <summary>
            文件所在目录或目录的父目录路径
            </summary>
            <param name="path"></param>
            <returns>文件所在目录或目录的父目录</returns>
        </member>
        <member name="M:Helper.FileOperation.GeneralFileTool.GetCurrentDirName(System.String)">
            <summary>
            获取文件路径的目录或文件夹的当前目录名
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Helper.FileOperation.GeneralFileTool.GetParentName(System.String)">
            <summary>
            文件目录名或目录的父目录名
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Helper.FileOperation.GeneralFileTool.RecordLogToFile(System.String,Helper.FileOperation.GeneralFileTool.Log)">
            <summary>
            请传入一个目录
            </summary>
            <param name="directory"></param>
            <param name="log"></param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException">if log is null, throws NullReferenceException</exception>
        </member>
        <member name="T:Helper.FileOperation.BaseDataRecord">
            <summary>
            适用于某种日志数据记录
            也适用于某种日志的多个文件记录
            </summary>
        </member>
        <member name="M:Helper.FileOperation.BaseDataRecord.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{Helper.FileOperation.BaseDataRecord.ColumnModel})">
            <summary>
            
            </summary>
            <param name="baseDir">文件目录</param>
            <param name="fileName">要生成的文件名，无后缀</param>
            <param name="list">列集合</param>
        </member>
        <member name="T:Helper.FileOperation.CsvFileHelper">
            <summary>
            CSV文件特点: 
            1. 遇到内容包含双引号会替换成两个双引号 
            2. 内容包含逗号或双引号或\r或\n会在外面包裹双引号
            该工具类目前保证内容的英文逗号可以被正确替换为中文逗号，但是双引号会被清除掉
            </summary>
        </member>
        <member name="M:Helper.FileOperation.CsvFileHelper.SaveCsv(System.Data.DataTable,System.String,System.String)">
            <summary>
            将DataTable中数据写入到CSV文件中
            </summary>
            <param name="dt">提供保存数据的DataTable</param>
            <param name="fullPath">全路径</param>
            <param name="encodeName">编码类型名称</param>
        </member>
        <member name="M:Helper.FileOperation.CsvFileHelper.FromCsv(System.String)">
            <summary>
            将CSV文件的数据读取到DataTable中
            为避免数据出错，会默认将读取的英文逗号转为中文逗号
            </summary>
            <returns>返回读取了CSV数据的DataTable</returns>
        </member>
        <member name="M:Helper.FileOperation.CsvFileHelper.GetType(System.String)">
            给定文件的路径，读取文件的二进制数据，判断文件的编码类型
            <param name="fileName">文件路径</param>
            <returns>文件的编码类型</returns>
        </member>
        <member name="M:Helper.FileOperation.CsvFileHelper.GetType(System.IO.Stream)">
            通过给定的文件流，判断文件的编码类型
            <param name="fs">文件流</param>
            <returns>文件的编码类型</returns>
        </member>
        <member name="M:Helper.FileOperation.CsvFileHelper.IsUtf8Bytes(System.Byte[])">
            判断是否是不带 BOM 的 UTF8 格式
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Helper.FileOperation.MiniExcelHelper">
            <summary>
            支持xlsx和csv，但不支持xls
            效率极高
            </summary>
        </member>
        <member name="T:Helper.FileOperation.NPOIExcelHelper">
            <summary>
            依赖NPOI
            </summary>
        </member>
        <member name="T:Helper.FileOperation.IniFileHelper">
            <summary>
            注意：文件必须要保存为ANSI(视操作系统语言类型而定，并不是某个固定的编码)编码才能获取到值
            </summary>
        </member>
        <member name="M:Helper.FileOperation.IniFileHelper.GetPrivateProfileString(System.String,System.String,System.String,System.Text.StringBuilder,System.Int32,System.String)">
            <summary>
            为INI文件中指定的节点取得字符串
            </summary>
            <param name="lpAppName">欲在其中查找关键字的节点名称</param>
            <param name="lpKeyName">欲获取的项名</param>
            <param name="lpDefault">指定的项没有找到时返回的默认值</param>
            <param name="lpReturnedString">指定一个字串缓冲区，长度至少为nSize</param>
            <param name="nSize">指定装载到lpReturnedString缓冲区的最大字符数量</param>
            <param name="lpFileName">INI文件完整路径</param>
            <returns>复制到lpReturnedString缓冲区的字节数量，其中不包括那些NULL中止字符</returns>
        </member>
        <member name="M:Helper.FileOperation.IniFileHelper.WritePrivateProfileString(System.String,System.String,System.String,System.String)">
            <summary>
            修改INI文件中内容
            </summary>
            <param name="lpApplicationName">欲在其中写入的节点名称</param>
            <param name="lpKeyName">欲设置的项名</param>
            <param name="lpString">要写入的新字符串</param>
            <param name="lpFileName">INI文件完整路径</param>
            <returns>非零表示成功，零表示失败</returns>
        </member>
        <member name="M:Helper.FileOperation.IniFileHelper.GetPrivateProfileStringA(System.String,System.String,System.String,System.Byte[],System.Int32,System.String)">
            <summary>
            用来获取section下的keys
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="def"></param>
            <param name="retVal"></param>
            <param name="size"></param>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Helper.FileOperation.IniFileHelper.GetPrivateProfileSection(System.String,System.IntPtr,System.UInt32,System.String)">
            <summary>
            获取某个指定节点(Section)中所有KEY和Value
            </summary>
            <param name="lpAppName">节点名称</param>
            <param name="lpReturnedString">返回值的内存地址,每个之间用\0分隔</param>
            <param name="nSize">内存大小(characters)</param>
            <param name="lpFileName">Ini文件</param>
            <returns>内容的实际长度,为0表示没有内容,为nSize-2表示内存大小不够</returns>
        </member>
        <member name="M:Helper.FileOperation.IniFileHelper.GetProxyInstance(System.String)">
            <summary>
            使用该CheckFilePathNullProxy代理后，默认会在使用本类方法之前检查文件路径
            </summary>
            <param name="iniFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:Helper.FileOperation.IniFileHelper.Read(System.String,System.String,System.String)">
            <summary>
            读取INI文件值
            </summary>
            <param name="section">节点名</param>
            <param name="key">键</param>
            <param name="def">未取到值时返回的默认值</param>
            <returns>读取的值</returns>
        </member>
        <member name="M:Helper.FileOperation.IniFileHelper.Write(System.String,System.String,System.String)">
            <summary>
            写INI文件值
            </summary>
            <param name="section">欲在其中写入的节点名称</param>
            <param name="key">欲设置的项名</param>
            <param name="value">要写入的新字符串</param>
            <returns>非零表示成功，零表示失败</returns>
        </member>
        <member name="M:Helper.FileOperation.IniFileHelper.GetSections">
            <summary>
            获取sections
            </summary>
            <returns></returns>
        </member>
        <member name="M:Helper.FileOperation.IniFileHelper.GetKeyPairs(System.String,System.String)">
            <summary>
            获取section下的键值对
            </summary>
            <param name="iniFile"></param>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:Helper.FileOperation.IniFileHelper.DeleteSection(System.String)">
            <summary>
            删除节
            </summary>
            <param name="section">节点名</param>
            <returns>非零表示成功，零表示失败</returns>
        </member>
        <member name="M:Helper.FileOperation.IniFileHelper.DeleteKey(System.String,System.String)">
            <summary>
            删除键的值
            </summary>
            <param name="section">节点名</param>
            <param name="key">键名</param>
            <returns>非零表示成功，零表示失败</returns>
        </member>
        <member name="M:Helper.Mail.Mail163Transfer.#ctor">
            <summary>
            只能用于接收邮件
            </summary>
        </member>
        <member name="M:Helper.Mail.Mail163Transfer.#ctor(Helper.Mail.Mail)">
            <summary>
            接收和发送
            </summary>
            <param name="mail"></param>
        </member>
        <member name="P:Helper.Mail.Mail.AttachmentList">
            <summary>
            附件
            </summary>
        </member>
        <member name="P:Helper.Mail.Mail.AlternateViews">
            <summary>
            存储消息正文的其他形式附件，如：图片
            </summary>
        </member>
        <member name="M:Helper.Mail.MailQQTransfer.#ctor">
            <summary>
            只能用于接收邮件
            </summary>
        </member>
        <member name="M:Helper.Mail.MailQQTransfer.#ctor(Helper.Mail.Mail)">
            <summary>
            接收和发送
            </summary>
            <param name="mail"></param>
        </member>
        <member name="M:Helper.Mail.MailTransfer.#ctor">
            <summary>
            只能用于接收邮件
            </summary>
        </member>
        <member name="M:Helper.Mail.MailTransfer.#ctor(Helper.Mail.Mail)">
            <summary>
            用于发送和接收邮件
            </summary>
            <param name="mail"></param>
        </member>
        <member name="M:Helper.Mail.MailTransfer.GetMailMessage(System.String,System.String)">
            <summary>
            若没有发送需求，即没有初始化Mail
            则务必在此处传入userName、password
            </summary>
            <param name="userName"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Helper.ModelToTable.ModelHelper.ToModel``1(System.Data.DataTable)">
            <summary>
            当数据表列名和属性名不一致时可使用TableColumnNameAttribute为属性指定数据表列名
            
            NotToModelAttribute 支持忽略不需要的属性值 即：忽略实体额外添加的属性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:Helper.ModelToTable.ModelHelper.ToTable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            NotToTableAttribute 支持忽略将不需要的属性值放入table
            </summary>
            <typeparam name="T"></typeparam>
            <param name="modelList"></param>
            <returns></returns>
        </member>
        <member name="M:Helper.ModelToTable.ModelHelper.BuildTheModelClassFromTable(System.Data.DataTable,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            批量创建数据库实体
            </summary>
            <param name="table"></param>
            <param name="tableName"></param>
            <param name="classComment"></param>
            <param name="toDirectory">DeskTop + "/TableModels"</param>
            <param name="nameSpace">DataModel</param>
            <param name="inheritBaseModel"></param>
        </member>
        <member name="T:Helper.ProcessServices.ProcessUtil">
            <summary>
            进程相关操作
            </summary>
        </member>
        <member name="M:Helper.ProcessServices.ProcessUtil.GetAllProcessList(System.Func{System.Diagnostics.Process,System.Boolean})">
            <summary>
            获取所有的进程，如果进程名称一致，则只取第一次进程。
            因此使用HashSet来去除重复的
            </summary>
            <returns></returns>
        </member>
        <member name="M:Helper.ProcessServices.ProcessUtil.GetProcessUserName(System.Int32)">
            <summary>
            获取进程对应的用户名
            </summary>
            <param name="pID"></param>
            <returns></returns>
        </member>
        <member name="M:Helper.ProcessServices.ProcessUtil.PrintProcessMessage(System.Diagnostics.Process)">
            <summary>
            打印当前选中的进程信息
            </summary>
            <param name="process"></param>
            <returns></returns>
        </member>
        <member name="T:Helper.ProcessServices.ServiceUtil">
            <summary>
            服务相关操作：
            服务分一般服务、设备驱动程序服务（硬件服务）
            </summary>
        </member>
        <member name="M:Helper.ProcessServices.ServiceUtil.GetAllDeviceServiceList(System.Func{System.ServiceProcess.ServiceController,System.Boolean})">
            <summary>
            获取所有设备驱动程序服务
            </summary>
            <returns></returns>
        </member>
        <member name="M:Helper.ProcessServices.ServiceUtil.GetAllNormalServiceList(System.Func{System.ServiceProcess.ServiceController,System.Boolean})">
            <summary>
            获取所有的一般服务
            </summary>
            <returns></returns>
        </member>
        <member name="M:Helper.ProcessServices.ServiceUtil.PrintServiceMessage(System.ServiceProcess.ServiceController)">
            <summary>
            打印当前选中的服务信息
            </summary>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="P:Helper.ThirdPartyUtils.QRCodeUtil.QRRealContent.WhiteL">
            <summary>
            第一次生成的内容，白边宽度
            </summary>
        </member>
        <member name="P:Helper.ThirdPartyUtils.QRCodeUtil.QRRealContent.WhiteT">
            <summary>
            第一次生成的内容，白边高度
            </summary>
        </member>
        <member name="P:Helper.ThirdPartyUtils.QRCodeUtil.QRRealContent.Width">
            <summary>
            实际内容宽度
            </summary>
        </member>
        <member name="P:Helper.ThirdPartyUtils.QRCodeUtil.QRRealContent.Height">
            <summary>
            实际内容高度
            </summary>
        </member>
        <member name="M:Helper.ThirdPartyUtils.QRCodeUtil.FillContent(System.Drawing.Bitmap,Helper.ThirdPartyUtils.QRCodeUtil.QRRealContent,System.Drawing.Bitmap,Helper.ThirdPartyUtils.QRCodeUtil.PersonalQRCode)">
            <summary>
            将之前生成的有效二维码以及Logo插入空白图片
            </summary>
            <param name="blank"></param>
            <param name="content"></param>
            <param name="logo"></param>
            <param name="model"></param>
        </member>
        <member name="M:Helper.ThirdPartyUtils.QRCodeUtil.QRCodeWithLogo(System.String,System.String,System.String,Helper.ThirdPartyUtils.QRCodeUtil.PersonalQRCode)">
            <summary>
            生成带Logo的二维码
            </summary>
            <param name="text">文本内容</param>
        </member>
        <member name="M:Helper.ThirdPartyUtils.QRCodeUtil.GetLineCode(System.String,System.Boolean)">
            <summary>
            文本内容
            </summary>
            <param name="text">只支持数字 只支持偶数个 最大长度80</param>
        </member>
        <member name="M:Helper.ThirdPartyUtils.QRCodeUtil.Read(System.String)">
            <summary>
            二维码 条形码读取
            </summary>
            <param name="filename">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:Helper.ThirdPartyUtils.QRCodeUtil.GetColorfulQR(System.String,System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
            彩色二维码
            </summary>
            <param name="text">二维码信息</param>
            <param name="foreground"></param>
            <param name="background"></param>
            <param name="codeSizeInPixels"></param>
            <returns></returns>
        </member>
        <member name="M:Helper.ThirdPartyUtils.QRCodeUtil.GetNormalColorQR(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="text">二维码信息</param>
            <param name="codeSizeInPixels"></param>
            <returns></returns>
        </member>
        <member name="M:Helper.Utils.AppUtils.SetAutoStart(System.String,System.Boolean)">
            <summary>
            设置开机自动启动-只需要调用改方法就可以了参数里面的bool变量是控制开机启动的开关的，默认为开启自启启动
            </summary>
            <param name="onOff">自启开关</param>
        </member>
        <member name="M:Helper.Utils.AppUtils.CreateDesktopQuick(System.String,System.String,System.String)">
            <summary>
            创建桌面快捷方式
            </summary>
            <param name="appPath">程序路径</param>
            <param name="shortcutName">快捷方式名</param>
            <param name="description">快捷方式描述</param>
            <returns>如果新创建了，true；已存在，false；</returns>
        </member>
        <member name="M:Helper.Utils.AppUtils.CreateShortcut(System.String,System.String,System.String,System.String)">
            <summary>
             向目标路径创建指定文件的快捷方式
            </summary>
            <param name="directory">目标目录</param>
            <param name="shortcutName">快捷方式名字</param>
            <param name="appPath">文件完全路径</param>
            <param name="description">描述</param>
            <returns>成功或失败</returns>
        </member>
        <member name="M:Helper.Utils.AppUtils.GetQuickFromFolder(System.String,System.String)">
            <summary>
            获取指定文件夹下指定应用程序的快捷方式路径集合
            </summary>
            <param name="directory">文件夹</param>
            <param name="targetPath">目标应用程序路径</param>
            <returns>目标应用程序的快捷方式</returns>
        </member>
        <member name="M:Helper.Utils.AppUtils.GetAppPathFromQuick(System.String)">
            <summary>
            获取快捷方式的目标文件路径-用于判断是否已经开启了自动启动
            </summary>
            <param name="shortcutPath"></param>
            <returns></returns>
        </member>
        <member name="T:Helper.Utils.ComputerInfo">
            <summary>
            电脑信息类 单例
            </summary>
        </member>
        <member name="M:Helper.Utils.ComputerInfo.GetCPU">
            <summary>
            查找cpu的名称，主频, 核心数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Helper.Utils.ComputerInfo.GetCPU_Count">
            <summary>
            获取cpu核心数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Helper.Utils.ComputerInfo.GetPhisicalMemory">
            <summary>
            获取系统内存大小
            </summary>
            <returns>内存大小（单位M）</returns>
        </member>
        <member name="M:Helper.Utils.ComputerInfo.GetDiskSize">
            <summary>
            获取硬盘容量
            </summary>
        </member>
        <member name="M:Helper.Utils.ComputerInfo.GetVersion">
            <summary>
            电脑型号
            </summary>
        </member>
        <member name="M:Helper.Utils.ComputerInfo.GetVideoController">
            <summary>
            显卡 芯片,显存大小
            </summary>
        </member>
        <member name="M:Helper.Utils.ComputerInfo.GetOS_Version">
            <summary>
            操做系统版本
            </summary>
        </member>
        <member name="M:Helper.Utils.ComputerInfo.ToGB(System.Double,System.Double)">
            <summary>  
            将字节转换为GB
            </summary>  
            <param name="size">字节值</param>  
            <param name="mod">除数，硬盘除以1024，内存除以1024</param>  
            <returns></returns>  
        </member>
        <member name="T:Helper.Utils.WindowsAPIType">
            <summary>
            windows api 名称
            </summary>
        </member>
        <member name="F:Helper.Utils.WindowsAPIType.Win32_PhysicalMemory">
            <summary>
            内存
            </summary>
        </member>
        <member name="F:Helper.Utils.WindowsAPIType.Win32_Processor">
            <summary>
            cpu
            </summary>
        </member>
        <member name="F:Helper.Utils.WindowsAPIType.win32_DiskDrive">
            <summary>
            硬盘
            </summary>
        </member>
        <member name="F:Helper.Utils.WindowsAPIType.Win32_ComputerSystemProduct">
            <summary>
            电脑型号
            </summary>
        </member>
        <member name="F:Helper.Utils.WindowsAPIType.Win32_DesktopMonitor">
            <summary>
            分辨率
            </summary>
        </member>
        <member name="F:Helper.Utils.WindowsAPIType.Win32_VideoController">
            <summary>
            显卡
            </summary>
        </member>
        <member name="F:Helper.Utils.WindowsAPIType.Win32_OperatingSystem">
            <summary>
            操做系统
            </summary>
        </member>
        <member name="F:Helper.Utils.WindowsAPIKeys.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="F:Helper.Utils.WindowsAPIKeys.VideoProcessor">
            <summary>
            显卡芯片
            </summary>
        </member>
        <member name="F:Helper.Utils.WindowsAPIKeys.AdapterRAM">
            <summary>
            显存大小
            </summary>
        </member>
        <member name="F:Helper.Utils.WindowsAPIKeys.ScreenWidth">
            <summary>
            分辨率宽
            </summary>
        </member>
        <member name="F:Helper.Utils.WindowsAPIKeys.ScreenHeight">
            <summary>
            分辨率高
            </summary>
        </member>
        <member name="F:Helper.Utils.WindowsAPIKeys.Version">
            <summary>
            电脑型号
            </summary>
        </member>
        <member name="F:Helper.Utils.WindowsAPIKeys.Size">
            <summary>
            硬盘容量
            </summary>
        </member>
        <member name="F:Helper.Utils.WindowsAPIKeys.Capacity">
            <summary>
            内存容量
            </summary>
        </member>
        <member name="F:Helper.Utils.WindowsAPIKeys.NumberOfCores">
            <summary>
            cpu核心数
            </summary>
        </member>
        <member name="T:Helper.Utils.HttpClientHelper">
            <summary>
            http请求类
            </summary>
        </member>
        <member name="M:Helper.Utils.HttpClientHelper.#ctor(System.String)">
            <summary>
            初始化
            </summary>
            <param name="ipaddress"></param>
        </member>
        <member name="M:Helper.Utils.HttpClientHelper.#ctor(System.String,System.String)">
            <summary>
            创建带用户信息的请求客户端
            </summary>
            <param name="accessToken">用户账号</param>        
            <param name="uriString">The URI string.</param>        
        </member>
        <member name="M:Helper.Utils.HttpClientHelper.#ctor(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            创建带自定义请求头的请求客户端
            </summary>
            <param name="requestHeaders"></param>                
            <param name="uriString">The URI string.</param>        
        </member>
        <member name="M:Helper.Utils.HttpClientHelper.#ctor(System.String,System.String,System.String)">
            <summary>
            创建带用户信息的请求客户端
            </summary>
            <param name="userName">用户账号</param>
            <param name="pwd">用户密码，当WebApi端不要求密码验证时，可传空串</param>
            <param name="uriString">The URI string.</param>
        </member>
        <member name="M:Helper.Utils.HttpClientHelper.GetString(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Get请求数据
              /// <para>最终以url参数的方式提交</para>
            </summary>
            <param name="parameters">参数字典,可为空</param>
            <param name="requestUri">例如/api/Files/UploadFile</param>
            <returns></returns>
        </member>
        <member name="M:Helper.Utils.HttpClientHelper.Get``1(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Get请求数据
            <para>最终以url参数的方式提交</para>
            </summary>
            <param name="parameters">参数字典</param>
            <param name="requestUri">例如/api/Files/UploadFile</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:Helper.Utils.HttpClientHelper.Put(System.Object,System.String)">
            <summary>
            put方式请求数据
            </summary>
            <param name="entity"></param>
            <param name="requestUri"></param>
            <returns></returns>
        </member>
        <member name="M:Helper.Utils.HttpClientHelper.Post(System.Object,System.String)">
            <summary>
            以json的方式Post数据 返回string类型
            <para>最终以json的方式放置在http体中</para>
            </summary>
            <param name="entity">实体</param>
            <param name="requestUri">例如/api/Files/UploadFile</param>
            <returns></returns>
        </member>
        <member name="M:Helper.Utils.HttpClientHelper.PostDicObj(System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            提交字典类型的数据
            <para>最终以formurlencode的方式放置在http体中</para>
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:Helper.Utils.HttpClientHelper.PostDic(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Post Form
            <para>最终以formurlencode的方式放置在http体中</para>        
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:Helper.Utils.HttpClientHelper.PostDicWishStream(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            图片下载
            </summary>
            <param name="temp"></param>
            <param name="requestUri"></param>
            <returns></returns>
        </member>
        <member name="M:Helper.Utils.HttpClientHelper.PostByte(System.Byte[],System.String)">
            <summary>
            文件下载
            </summary>
            <param name="bytes"></param>
            <param name="requestUrl"></param>
            <returns></returns>
        </member>
        <member name="M:Helper.Utils.HttpClientHelper.PostFormData(System.Collections.Generic.List{Helper.Utils.FormItemModel},System.String)">
            <summary>
            以multipart/form-data 方式请求
            </summary>
            <param name="formItems"></param>
            <param name="requestUrl"></param>
            <returns></returns>
        </member>
        <member name="M:Helper.Utils.HttpClientHelper.Head(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Head 方式请求数据
            </summary>
            <param name="entity"></param>
            <param name="requestUri"></param>
            <returns></returns>
        </member>
        <member name="M:Helper.Utils.HttpClientHelper.ConcatURL(System.String)">
            <summary>
            把请求的URL相对路径组合成绝对路径
            </summary>
        </member>
        <member name="T:Helper.Utils.FormItemModel">
            <summary>  
            表单数据项  
            </summary>  
        </member>
        <member name="P:Helper.Utils.FormItemModel.Key">
            <summary>  
            表单键，request["key"]  
            </summary>  
        </member>
        <member name="P:Helper.Utils.FormItemModel.Value">
            <summary>  
            表单值,上传文件时忽略，request["key"].value  
            </summary>  
        </member>
        <member name="P:Helper.Utils.FormItemModel.IsFile">
            <summary>  
            是否是文件  
            </summary>  
        </member>
        <member name="P:Helper.Utils.FormItemModel.FileName">
            <summary>  
            上传的文件名  
            </summary>  
        </member>
        <member name="P:Helper.Utils.FormItemModel.FileContent">
            <summary>  
            文件内容
            </summary>  
        </member>
        <member name="M:Helper.Utils.NetWorkStatus.GetNetConStatus(System.String)">
             <summary>
             判断网络的连接状态
             </summary>
             <returns>
             网络状态(1-->未联网;2-->采用调治解调器上网;3-->采用网卡上网)
            </returns>
        </member>
        <member name="M:Helper.Utils.NetWorkStatus.PingNetAddress(System.String)">
            <summary>
            ping 具体的网址看能否ping通
            </summary>
            <param name="strNetAdd"></param>
            <returns></returns>
        </member>
        <member name="M:Helper.Utils.NetWorkStatus.NetWorkConnection(System.String)">
            <summary>
            返回ErrorMsg
            </summary>
            <param name="ipStr"></param>
            <returns></returns>
        </member>
        <member name="M:Helper.Utils.ObjectPool.OfferObject">
            <summary>
            申请对象
            </summary>
        </member>
        <member name="M:Helper.Utils.ObjectPool.RecycleObject(Helper.AbstractModel.AbstractRecyclable)">
            <summary>
            回收对象
            </summary>
        </member>
        <member name="T:Helper.Utils.StopWatcher">
            <summary>
            某个功能耗时统计
            </summary>
        </member>
        <member name="M:Helper.ViewHelper.ScreenCapture.CaptureImage(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            从大图中截取一部分图片
            </summary>
            <param name="fromImagePath">来源图片地址</param>        
            <param name="offsetX">从偏移X坐标位置开始截取</param>
            <param name="offsetY">从偏移Y坐标位置开始截取</param>
            <param name="toImagePath">保存图片地址</param>
            <param name="width">保存图片的宽度</param>
            <param name="height">保存图片的高度</param>
            <returns></returns>
        </member>
    </members>
</doc>
